# -*- coding: utf-8 -*-
"""#22~23

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19BIZZ3oLiQiNGZQayE-h4R1o8WXEMkY_

### 필요 열 생성 및 에너지 절감 필요 공동주택 선정 
- 단지분류 열 생성
- 세대별로 데이터 셋 분리 
- 단지분류가 "아파트"인 값만 추출
- 2010년 이하에 준공된 아파트 추출 
- 2021 상반기 세대당 월별 전기공용 평균 값 추출
- 2021 상반기 세대당 월별 전기공용 평균 기준으로 이상 단지 탐지 

**분석 대상 선별 후, 엑셀 작업**
- #22 Graph. 에너지 절감 필요 아파트 비율
- #23 Table. 에너지 절감 필요 아파트 가명칭

**분석 대상** 
- 다른 단지분류를 제외한 '아파트'에 해당하는 값만 대상으로 이상치 추출
- 10년 이상된 아파트 대상으로 이상치 탐지 
- 2021년 상반기 가구별 전기공용 평균 기준
"""

import pandas as pd

df = pd.read_csv("아파트전체정보_ver0.2.csv", engine = 'python')

df_basic = pd.read_csv("단지기본정보_ver3.csv", engine = 'python')

"""**아파트전체정보에 단지분류 열 추가**"""

df['단지분류'] = ''

for i in range(len(df_basic)):
    for j in range(len(df)):
        if df.loc[j, '가명칭'] == df_basic.loc[i, '가명칭']:
            df.loc[j, '단지분류'] = df_basic.loc[i, '단지분류']

df.to_csv("아파트전체정보_ver0.2.csv", index = False, encoding = 'cp949')

"""**아파트만 추출**"""

df_아파트 = df[df['단지분류'] == '아파트']

df_아파트.단지분류.unique()

len(df_아파트.가명칭.unique())

len(df_아파트[df_아파트['사용승인년도_범위'] <= 2010].가명칭.unique())

"""**세대별로 분리**
- 공동주택 중 아파트의 세대별로 분리 
"""

groups = df_아파트.groupby(df_아파트.세대수_범위)

df300 = groups.get_group(300)
df500 = groups.get_group(500)
df700 = groups.get_group(700)
df900 = groups.get_group(900)
df1100 = groups.get_group(1100)
df1300 = groups.get_group(1300)
df4000 = groups.get_group(4000)

df300.to_csv("300세대_아파트_ver2.csv", index = False, encoding = 'cp949')
df500.to_csv("500세대_아파트_ver2.csv", index = False, encoding = 'cp949')
df700.to_csv("700세대_아파트_ver2.csv", index = False, encoding = 'cp949')
df900.to_csv("900세대_아파트_ver2.csv", index = False, encoding = 'cp949')
df1100.to_csv("1100세대_아파트_ver2.csv", index = False, encoding = 'cp949')
df1300.to_csv("1300세대_아파트_ver2.csv", index = False, encoding = 'cp949')
df4000.to_csv("4000세대_아파트_ver2.csv", index = False, encoding = 'cp949')

print('300세대 아파트 공용전기료 평균', df300['전기공용_우리단지총액'].mean())
print('500세대 아파트 공용전기료 평균', df500['전기공용_우리단지총액'].mean())
print('700세대 아파트 공용전기료 평균', df700['전기공용_우리단지총액'].mean())
print('900세대 아파트 공용전기료 평균', df900['전기공용_우리단지총액'].mean())
print('1100세대 아파트 공용전기료 평균', df1100['전기공용_우리단지총액'].mean())
print('1300세대 아파트 공용전기료 평균', df1300['전기공용_우리단지총액'].mean())
print('4000세대 아파트 공용전기료 평균', df4000['전기공용_우리단지총액'].mean())

"""**2010년이하 아파트전체정보 추출**"""

df300_10이하 = df300[df300['사용승인년도_범위'] <= 2010].copy()

df500_10이하 = df500[df500['사용승인년도_범위'] <= 2010].copy()
df700_10이하 = df700[df700['사용승인년도_범위'] <= 2010].copy()
df900_10이하 = df900[df900['사용승인년도_범위'] <= 2010].copy()
df1100_10이하 = df1100[df1100['사용승인년도_범위'] <= 2010].copy()
df1300_10이하 = df1300[df1300['사용승인년도_범위'] <= 2010].copy()
df4000_10이하 = df4000[df4000['사용승인년도_범위'] <= 2010].copy()

print(df300_10이하.사용승인년도.unique())
print(df500_10이하.사용승인년도.unique())
print(df700_10이하.사용승인년도.unique())
print(df900_10이하.사용승인년도.unique())
print(df1100_10이하.사용승인년도.unique())
print(df1300_10이하.사용승인년도.unique())
print(df4000_10이하.사용승인년도.unique())

"""**세대별 월별 전기공용금액 열 생성**"""

df300_10이하['세대별_월별_전기공용'] = ''

df300_10이하['세대별_월별_전기공용'] = df300_10이하['전기공용_우리단지총액'] / df300_10이하['세대수']

df300_10이하

df500_10이하['세대별_월별_전기공용'] = ''

df500_10이하['세대별_월별_전기공용'] = df500_10이하['전기공용_우리단지총액'] / df500_10이하['세대수']

df700_10이하['세대별_월별_전기공용'] = ''

df700_10이하['세대별_월별_전기공용'] = df700_10이하['전기공용_우리단지총액'] / df700_10이하['세대수']

df900_10이하['세대별_월별_전기공용'] = ''
df900_10이하['세대별_월별_전기공용'] = df900_10이하['전기공용_우리단지총액'] / df900_10이하['세대수']

df1100_10이하['세대별_월별_전기공용'] = ''
df1100_10이하['세대별_월별_전기공용'] = df1100_10이하['전기공용_우리단지총액'] / df1100_10이하['세대수']

df1300_10이하['세대별_월별_전기공용'] = ''
df1300_10이하['세대별_월별_전기공용'] = df1300_10이하['전기공용_우리단지총액'] / df1300_10이하['세대수']

df4000_10이하['세대별_월별_전기공용'] = ''
df4000_10이하['세대별_월별_전기공용'] = df4000_10이하['전기공용_우리단지총액'] / df4000_10이하['세대수']

df4000_10이하.세대수_범위.unique()

df1300_10이하.세대수_범위.unique()

df1100_10이하.세대수_범위.unique()

df900_10이하.세대수_범위.unique()

df700_10이하.세대수_범위.unique()

df500_10이하.세대수_범위.unique()

df300_10이하.세대수_범위.unique()

"""**2021년 상반기 세대당 월별 전기공용 평균 구하기**"""

grouped300 = df300_10이하[df300_10이하['부과년도'] == 2021].groupby(['가명칭'])
df300_2021 = pd.DataFrame(grouped300['세대별_월별_전기공용'].mean())

grouped500 = df500_10이하[df500_10이하['부과년도'] == 2021].groupby(['가명칭'])
df500_2021 = pd.DataFrame(grouped500['세대별_월별_전기공용'].mean())

grouped700 = df700_10이하[df700_10이하['부과년도'] == 2021].groupby(['가명칭'])
df700_2021 = pd.DataFrame(grouped700['세대별_월별_전기공용'].mean())

grouped900 = df900_10이하[df900_10이하['부과년도'] == 2021].groupby(['가명칭'])
df900_2021 = pd.DataFrame(grouped900['세대별_월별_전기공용'].mean())

grouped1100 = df1100_10이하[df1100_10이하['부과년도'] == 2021].groupby(['가명칭'])
df1100_2021 = pd.DataFrame(grouped1100['세대별_월별_전기공용'].mean())

grouped1300 = df1300_10이하[df1300_10이하['부과년도'] == 2021].groupby(['가명칭'])
df1300_2021 = pd.DataFrame(grouped1300['세대별_월별_전기공용'].mean())

grouped4000 = df4000_10이하[df4000_10이하['부과년도'] == 2021].groupby(['가명칭'])
df4000_2021 = pd.DataFrame(grouped4000['세대별_월별_전기공용'].mean())

"""### 에너지 절감 필요 공동주택 선정
- IQR 그래프를 활용하여 이상치 값 추출 즉, 에너지 사용료가 많이 나가는 아파트 추출 
- 세대수별로 나누어 각각 이상치 판단

**IQR그래프 / 이상치 탐지**
- IQR 코드 
- 데이터 셋별로 이상치 탐지 
- 2010년 이하, 세대별 (300, 700, 900, 1100, 1300, 4000)
- 기준 값 : 2021년 상반기 "세대별 월별 전기공용" 평균 
- 평균의 분포 > 이상치 탐지

**300세대 이상치**
- Q3 이상 (75% 이상)
- Q3 + 1.5*IQR (극단 이상치)
"""

Q3_300_2021 = df300_2021.quantile(.75)['세대별_월별_전기공용']
IQR_300_2021 = df300_2021.quantile(.75)['세대별_월별_전기공용'] - df300_2021.quantile(.25)['세대별_월별_전기공용']

Q3_300_2021_단지명 = []

# 이상치 Q3 기준 
for i in df300_2021.index:
    if df300_2021.loc[i, '세대별_월별_전기공용']  > Q3_300_2021:
        Q3_300_2021_단지명.append(i)

Outliers_300_2021_단지명 = []

# 이상치 Q3 + 1.5*IQR 기준 
for i in df300_2021.index:
    if df300_2021.loc[i, '세대별_월별_전기공용']  > Q3_300_2021 + 1.5*IQR_300_2021:
        Outliers_300_2021_단지명.append(i)

"""**500세대 이상치**"""

Q3_500_2021 = df500_2021.quantile(.75)['세대별_월별_전기공용']
IQR_500_2021 = df500_2021.quantile(.75)['세대별_월별_전기공용'] - df500_2021.quantile(.25)['세대별_월별_전기공용']

Q3_500_2021_단지명 = []

# 이상치 Q3 기준 
for i in df500_2021.index:
    if df500_2021.loc[i, '세대별_월별_전기공용']  > Q3_500_2021:
        Q3_500_2021_단지명.append(i)
        
Outliers_500_2021_단지명 = []

# 이상치 Q3 + 1.5*IQR 기준 
for i in df500_2021.index:
    if df500_2021.loc[i, '세대별_월별_전기공용']  > Q3_500_2021 + 1.5*IQR_500_2021:
        Outliers_500_2021_단지명.append(i)

"""**700세대 이상치**"""

Q3_700_2021 = df700_2021.quantile(.75)['세대별_월별_전기공용']
IQR_700_2021 = df700_2021.quantile(.75)['세대별_월별_전기공용'] - df700_2021.quantile(.25)['세대별_월별_전기공용']

Q3_700_2021_단지명 = []

# 이상치 Q3 기준 
for i in df700_2021.index:
    if df700_2021.loc[i, '세대별_월별_전기공용']  > Q3_700_2021:
        Q3_700_2021_단지명.append(i)
        
Outliers_700_2021_단지명 = []

# 이상치 Q3 + 1.5*IQR 기준 
for i in df700_2021.index:
    if df700_2021.loc[i, '세대별_월별_전기공용']  > Q3_700_2021 + 1.5*IQR_700_2021:
        Outliers_700_2021_단지명.append(i)

"""**900세대 이상치**"""

Q3_900_2021 = df900_2021.quantile(.75)['세대별_월별_전기공용']
IQR_900_2021 = df900_2021.quantile(.75)['세대별_월별_전기공용'] - df900_2021.quantile(.25)['세대별_월별_전기공용']

Q3_900_2021_단지명 = []

# 이상치 Q3 기준 
for i in df900_2021.index:
    if df900_2021.loc[i, '세대별_월별_전기공용']  > Q3_900_2021:
        Q3_900_2021_단지명.append(i)
        
Outliers_900_2021_단지명 = []

# 이상치 Q3 + 1.5*IQR 기준 
for i in df900_2021.index:
    if df900_2021.loc[i, '세대별_월별_전기공용']  > Q3_900_2021 + 1.5*IQR_900_2021:
        Outliers_900_2021_단지명.append(i)

"""**1100세대 이상치**"""

Q3_1100_2021 = df1100_2021.quantile(.75)['세대별_월별_전기공용']
IQR_1100_2021 = df1100_2021.quantile(.75)['세대별_월별_전기공용'] - df1100_2021.quantile(.25)['세대별_월별_전기공용']

Q3_1100_2021_단지명 = []

# 이상치 Q3 기준 
for i in df1100_2021.index:
    if df1100_2021.loc[i, '세대별_월별_전기공용']  > Q3_1100_2021:
        Q3_1100_2021_단지명.append(i)
        
Outliers_1100_2021_단지명 = []

# 이상치 Q3 + 1.5*IQR 기준 
for i in df1100_2021.index:
    if df1100_2021.loc[i, '세대별_월별_전기공용']  > Q3_1100_2021 + 1.5*IQR_1100_2021:
        Outliers_1100_2021_단지명.append(i)

"""**1300세대 이상치**"""

Q3_1300_2021 = df1300_2021.quantile(.75)['세대별_월별_전기공용']
IQR_1300_2021 = df1300_2021.quantile(.75)['세대별_월별_전기공용'] - df1300_2021.quantile(.25)['세대별_월별_전기공용']

Q3_1300_2021_단지명 = []

# 이상치 Q3 기준 
for i in df1300_2021.index:
    if df1300_2021.loc[i, '세대별_월별_전기공용']  > Q3_1300_2021:
        Q3_1300_2021_단지명.append(i)
        
Outliers_1300_2021_단지명 = []

# 이상치 Q3 + 1.5*IQR 기준 
for i in df1300_2021.index:
    if df1300_2021.loc[i, '세대별_월별_전기공용']  > Q3_1300_2021 + 1.5*IQR_1300_2021:
        Outliers_1300_2021_단지명.append(i)

"""**4000세대 이상치**"""

Q3_4000_2021 = df4000_2021.quantile(.75)['세대별_월별_전기공용']
IQR_4000_2021 = df4000_2021.quantile(.75)['세대별_월별_전기공용'] - df4000_2021.quantile(.25)['세대별_월별_전기공용']

Q3_4000_2021_단지명 = []

# 이상치 Q3 기준 
for i in df4000_2021.index:
    if df4000_2021.loc[i, '세대별_월별_전기공용']  > Q3_4000_2021:
        Q3_4000_2021_단지명.append(i)
        
Outliers_4000_2021_단지명 = []

# 이상치 Q3 + 1.5*IQR 기준 
for i in df4000_2021.index:
    if df4000_2021.loc[i, '세대별_월별_전기공용']  > Q3_4000_2021 + 1.5*IQR_4000_2021:
        Outliers_4000_2021_단지명.append(i)

"""**Q3 이상의 이상치**"""

print("300세대 Q3 이상치 : ", Q3_300_2021_단지명)
print("500세대 Q3 이상치 : ", Q3_500_2021_단지명)
print("700세대 Q3 이상치 : ", Q3_700_2021_단지명)
print("900세대 Q3 이상치 : ", Q3_900_2021_단지명)
print("1100세대 Q3 이상치 : ", Q3_1100_2021_단지명)
print("1300세대 Q3 이상치 : ", Q3_1300_2021_단지명)
print("4000세대 Q3 이상치 : ", Q3_4000_2021_단지명)

Q3_300_2021_단지명_df = pd.DataFrame(Q3_300_2021_단지명).rename({0:'300세대_Q3_가구별_전기공용'}, axis =1)
Q3_500_2021_단지명_df = pd.DataFrame(Q3_500_2021_단지명).rename({0:'500세대_Q3_가구별_전기공용'}, axis =1)
Q3_700_2021_단지명_df = pd.DataFrame(Q3_700_2021_단지명).rename({0:'700세대_Q3_가구별_전기공용'}, axis =1)
Q3_900_2021_단지명_df = pd.DataFrame(Q3_900_2021_단지명).rename({0:'900세대_Q3_가구별_전기공용'}, axis =1)
Q3_1100_2021_단지명_df = pd.DataFrame(Q3_1100_2021_단지명).rename({0:'1100세대_Q3_가구별_전기공용'}, axis =1)
Q3_1300_2021_단지명_df = pd.DataFrame(Q3_1300_2021_단지명).rename({0:'1300세대_Q3_가구별_전기공용'}, axis =1)
Q3_4000_2021_단지명_df = pd.DataFrame(Q3_4000_2021_단지명).rename({0:'4000세대_Q3_가구별_전기공용'}, axis =1)

whole_q3 = pd.concat([Q3_300_2021_단지명_df, Q3_500_2021_단지명_df, Q3_700_2021_단지명_df, Q3_900_2021_단지명_df, Q3_1100_2021_단지명_df, Q3_1300_2021_단지명_df,Q3_4000_2021_단지명_df ], axis=1)

whole_q3.to_csv("가구별_전기공용_Q3_아파트만_ver3.csv", index=False, encoding = 'cp949')

"""**Q3 + 1.5*IQR 이상치**"""

print("300세대 Q3 + 1.5*IQR 이상치 : ", Outliers_300_2021_단지명)
print("500세대 Q3 + 1.5*IQR 이상치 : ", Outliers_500_2021_단지명)
print("700세대 Q3 + 1.5*IQR 이상치 : ", Outliers_700_2021_단지명)
print("900세대 Q3 + 1.5*IQR 이상치 : ", Outliers_900_2021_단지명)
print("1100세대 Q3 + 1.5*IQR 이상치 : ", Outliers_1100_2021_단지명)
print("1300세대 Q3 + 1.5*IQR 이상치 : ", Outliers_1300_2021_단지명)
print("4000세대 Q3 + 1.5*IQR 이상치 : ", Outliers_4000_2021_단지명)

Outliers_300_2021_단지명_df = pd.DataFrame(Outliers_300_2021_단지명).rename({0:'300세대_이상치_가구별_전기공용'}, axis =1)
Outliers_500_2021_단지명_df = pd.DataFrame(Outliers_500_2021_단지명).rename({0:'500세대_이상치_가구별_전기공용'}, axis =1)
Outliers_700_2021_단지명_df = pd.DataFrame(Outliers_700_2021_단지명).rename({0:'700세대_이상치_가구별_전기공용'}, axis =1)
Outliers_900_2021_단지명_df = pd.DataFrame(Outliers_900_2021_단지명).rename({0:'900세대_이상치_가구별_전기공용'}, axis =1)
Outliers_1100_2021_단지명_df = pd.DataFrame(Outliers_1100_2021_단지명).rename({0:'1100세대_이상치_가구별_전기공용'}, axis =1)
Outliers_1300_2021_단지명_df = pd.DataFrame(Outliers_1300_2021_단지명).rename({0:'1300세대_이상치_가구별_전기공용'}, axis =1)
Outliers_4000_2021_단지명_df = pd.DataFrame(Outliers_4000_2021_단지명).rename({0:'4000세대_이상치_가구별_전기공용'}, axis =1)

whole_outlier = pd.concat([Outliers_300_2021_단지명_df, Outliers_500_2021_단지명_df, Outliers_700_2021_단지명_df, Outliers_900_2021_단지명_df, Outliers_1100_2021_단지명_df, Outliers_1300_2021_단지명_df,Outliers_4000_2021_단지명_df ], axis=1)

whole_outlier.to_csv("가구별_전기공용_이상치_아파트만_ver3.csv", index = False, encoding = 'cp949')

"""**Q3 이상치**"""

whole_q3

"""**Q3 + 1.5*IQR**"""

whole_outlier

"""**이상치 단지 탐색**"""

whole_outlier.columns

out_cnt = 0
for i in whole_outlier.columns:
    out_cnt += whole_outlier[i].notnull().sum()

out_cnt

final_out = pd.concat([whole_outlier['300세대_이상치_가구별_전기공용'], whole_outlier['500세대_이상치_가구별_전기공용'],  whole_outlier['700세대_이상치_가구별_전기공용'], whole_outlier['900세대_이상치_가구별_전기공용'], whole_outlier['4000세대_이상치_가구별_전기공용']]).dropna().reset_index().drop('index', axis=1).rename({0:"이상치_단지_가명칭"}, axis=1)

# 극단 이상치 리스트 
for i in final_out['이상치_단지_가명칭'].values:
    print(i)

"""**극단 이상치 단지에 해당하는 아파트 전체 정보 추출**"""

final_whole_out = []

for j in final_out['이상치_단지_가명칭'].values:
    for i in range(len(df)):
        if df.loc[i, '가명칭'] == j:
            final_whole_out.append(df.loc[i,:])

final_whole_out = pd.DataFrame(final_whole_out)

final_whole_out

final_whole_out.to_csv("이상치_단지_전체정보_아파트만_ver3.csv", index = False, encoding = 'cp949')

"""**극단 이상치와 시설 특성 비교**"""

final_whole_out['세대전기계약방식'].groupby(final_whole_out['가명칭']).value_counts()

final_whole_out_fac = final_whole_out.groupby('세대수_범위').mean().loc[:, ['전기공용_우리단지총액','사용승인년도','승강기대수', '지상','지하','부대복리시설수']]

df_fac = df.groupby('세대수_범위').mean().loc[:, ['전기공용_우리단지총액','사용승인년도', '승강기대수', '지상','지하','부대복리시설수']]

final_whole_out_fac['지하비율'] = ''

final_whole_out_fac['지하비율'] = final_whole_out_fac['지하'] / (final_whole_out_fac['지하'] + final_whole_out_fac['지상'])

final_whole_out_fac

df_fac['지하비율'] = ''

df_fac['지하비율'] = df_fac['지하'] / (df_fac['지하'] + df_fac['지상'])

df_fac

"""**이상 단지 수와 전체 공동주택 단지 수**"""

len(df['가명칭'].unique())

len(final_whole_out['가명칭'].unique())